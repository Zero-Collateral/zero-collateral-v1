{
  "address": "0x54A74ED0170c467eFD3314111D258eC4F795F611",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "strategyName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "StrategyRebalanced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "balanceRatioMin",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "balanceRatioMax",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f740207c41d5b221d04888dae85544344b0a6bf26aa39ab229c8213f901bebf",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x54A74ED0170c467eFD3314111D258eC4F795F611",
    "transactionIndex": 0,
    "gasUsed": "830689",
    "logsBloom": "0x
    "blockHash": "0xb1c471a576adff0d465821aa95fe9f1bc2605ee353bedbf03e0b67dbf8a48132",
    "transactionHash": "0x1f740207c41d5b221d04888dae85544344b0a6bf26aa39ab229c8213f901bebf",
    "logs": [],
    "blockNumber": 24632478,
    "cumulativeGasUsed": "830689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ea653af39b9a57489bbccfbe05a6ac3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"strategyName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"StrategyRebalanced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"balanceRatioMin\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"balanceRatioMax\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(address,uint16,uint16)\":{\"params\":{\"balanceRatioMax\":\"Percentage indicating the _ limit of underlying token balance should remain on the TToken\",\"balanceRatioMin\":\"Percentage indicating the _ limit of underlying token balance should remain on the TToken\",\"cTokenAddress\":\"Address of the Compound token that has the same underlying asset as the TToken.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of underlying tokens that must be available.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"init(address,uint16,uint16)\":{\"notice\":\"Sets the Compound token that should be used to manage the underlying Teller Token asset.\"},\"rebalance()\":{\"notice\":\"Rebalances the underlying asset held by the Teller Token. This strategy looks at the ratio of held underlying asset balance and balance deposited into Compound. Based on the store {balanceRatioMin} and {balanceRatioMax} values, will deposit or withdraw to keep the ratio within that range.\"},\"withdraw(uint256)\":{\"notice\":\"Rebalances the TToken funds by indicating a minimum {amount} of underlying tokens that must be present  after the call.If the minimum amount is present, no rebalance happens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/ttoken/strategies/compound/TTokenCompoundStrategy_1.sol\":\"TTokenCompoundStrategy_1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x36d0f5db441d2c3db7ee04d84c88ce9b14251cff4387702e96965c51acd1bc84\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25eeaba823d4fc9c52d82a77cfdb409550ad985fc49b30a5560c1f313c1ca905\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf667fb8d6beb59fc6f37d60ada6b811b5861512fedc661c483b9eca042e96112\",\"license\":\"MIT\"},\"contracts/lending/ttoken/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Role ID used to pull funds for the asset it manages (i.e. TellerDiamond)\\nbytes32 constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n// Role ID used to for accounts to call special methods that modify its state\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\nuint256 constant EXCHANGE_RATE_FACTOR = 1e18;\\nuint256 constant ONE_HUNDRED_PERCENT = 10000;\\n\",\"keccak256\":\"0x0c5f8ce14f4efd59a314373363524e0428b5b7e8a6ee907b35ee1d7ffe886fdf\",\"license\":\"MIT\"},\"contracts/lending/ttoken/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nstruct Store {\\n    ERC20 underlying;\\n    address strategy;\\n    uint8 decimals;\\n    bool restricted;\\n}\\n\\nbytes32 constant POSITION = keccak256(\\\"ttoken.storage.position\\\");\\n\\nfunction store() pure returns (Store storage s_) {\\n    bytes32 position = POSITION;\\n    assembly {\\n        s_.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0xcbf0b7b973f68c167af3a47da31fa1b8d1ffc51a7495d50a1220d062d83ca12c\",\"license\":\"MIT\"},\"contracts/lending/ttoken/strategies/ITTokenStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITTokenStrategy {\\n    event StrategyRebalanced(\\n        string indexed strategyName,\\n        address indexed sender\\n    );\\n\\n    function totalUnderlyingSupply() external virtual returns (uint256);\\n\\n    function rebalance() external virtual;\\n\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\",\"keccak256\":\"0x0d12e40172236b5ef0f991be275ef88f330c540c79a6833a090adaf951214967\",\"license\":\"MIT\"},\"contracts/lending/ttoken/strategies/TTokenStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { ITTokenStrategy } from \\\"./ITTokenStrategy.sol\\\";\\n\\nabstract contract TTokenStrategy is ITTokenStrategy, ERC165 {\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC165.supportsInterface(interfaceId) ||\\n            interfaceId == type(ITTokenStrategy).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x8977bf4e9bc08c2a2b45406f2d4ee28f6366f7c838292880a1d4175b4f38380a\",\"license\":\"MIT\"},\"contracts/lending/ttoken/strategies/compound/TTokenCompoundStrategy_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// contracts\\nimport {\\n    RolesMods\\n} from \\\"../../../../contexts2/access-control/roles/RolesMods.sol\\\";\\nimport { ADMIN } from \\\"../../data.sol\\\";\\n\\n// Interfaces\\nimport { ICErc20 } from \\\"../../../../shared/interfaces/ICErc20.sol\\\";\\nimport { TTokenStrategy } from \\\"../TTokenStrategy.sol\\\";\\n\\n// Libraries\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { NumbersLib } from \\\"../../../../shared/libraries/NumbersLib.sol\\\";\\n\\n// Storage\\nimport \\\"../../storage.sol\\\" as TokenStorage;\\nimport \\\"./storage.sol\\\" as CompoundStorage;\\n\\ncontract TTokenCompoundStrategy_1 is RolesMods, TTokenStrategy {\\n    function() pure returns (TokenStorage.Store storage)\\n        private constant tokenStore = TokenStorage.store;\\n\\n    function() pure returns (CompoundStorage.Store storage)\\n        private constant compoundStore = CompoundStorage.store;\\n\\n    string public constant NAME = \\\"CompoundStrategy_1\\\";\\n\\n    /* External Functions */\\n\\n    function totalUnderlyingSupply() external override returns (uint256) {\\n        return\\n            tokenStore().underlying.balanceOf(address(this)) +\\n            compoundStore().cToken.balanceOfUnderlying(address(this));\\n    }\\n\\n    /**\\n     * @notice Rebalances the underlying asset held by the Teller Token.\\n     *\\n     * This strategy looks at the ratio of held underlying asset balance and balance deposited into\\n     * Compound. Based on the store {balanceRatioMin} and {balanceRatioMax} values, will deposit or\\n     * withdraw to keep the ratio within that range.\\n     */\\n    function rebalance() public override {\\n        (uint256 storedBal, uint256 compoundBal, uint16 storedRatio) =\\n            _getBalanceInfo();\\n        if (storedRatio > compoundStore().balanceRatioMax) {\\n            // Calculate median ratio to rebalance to\\n            uint16 medianRatio =\\n                (compoundStore().balanceRatioMax +\\n                    compoundStore().balanceRatioMin) / 2;\\n            uint256 requiredBal =\\n                NumbersLib.percent(storedBal + compoundBal, medianRatio);\\n            uint256 amountToDeposit = storedBal - requiredBal;\\n\\n            // Allow Compound to take underlying tokens\\n            SafeERC20.safeIncreaseAllowance(\\n                tokenStore().underlying,\\n                address(compoundStore().cToken),\\n                amountToDeposit\\n            );\\n            // Deposit tokens into Compound\\n            compoundStore().cToken.mint(amountToDeposit);\\n\\n            emit StrategyRebalanced(NAME, msg.sender);\\n        } else if (storedRatio < compoundStore().balanceRatioMin) {\\n            // Withdraw tokens from Compound\\n            _withdraw(0, storedBal, compoundBal, storedRatio);\\n\\n            emit StrategyRebalanced(NAME, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rebalances the TToken funds by indicating a minimum {amount} of underlying tokens that must be present\\n     *  after the call.\\n     * @notice If the minimum amount is present, no rebalance happens.\\n     * @param amount Amount of underlying tokens that must be available.\\n     */\\n    function withdraw(uint256 amount) external override {\\n        (uint256 storedBal, uint256 compoundBal, uint16 storedRatio) =\\n            _getBalanceInfo();\\n        if (storedBal < amount) {\\n            _withdraw(amount, storedBal, compoundBal, storedRatio);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets balances and the current ratio of the underlying asset stored on the TToken.\\n     */\\n    function _getBalanceInfo()\\n        internal\\n        returns (\\n            uint256 storedBalance_,\\n            uint256 compoundBalance_,\\n            uint16 storedRatio_\\n        )\\n    {\\n        storedBalance_ = tokenStore().underlying.balanceOf(address(this));\\n        compoundBalance_ = compoundStore().cToken.balanceOfUnderlying(\\n            address(this)\\n        );\\n        storedRatio_ = NumbersLib.ratioOf(\\n            storedBalance_,\\n            storedBalance_ + compoundBalance_\\n        );\\n    }\\n\\n    /**\\n     * @dev Rebalances funds stored on the TToken by indicating an extra {amount} to withdraw.\\n     */\\n    function _withdraw(\\n        uint256 amount,\\n        uint256 storedBal,\\n        uint256 compoundBal,\\n        uint16 storedRatio\\n    ) internal {\\n        // Calculate amount to rebalance\\n        uint16 medianRatio =\\n            (compoundStore().balanceRatioMax +\\n                compoundStore().balanceRatioMin) / 2;\\n        uint256 requiredBal =\\n            NumbersLib.percent(\\n                storedBal + compoundBal - amount,\\n                medianRatio - storedRatio\\n            );\\n        uint256 redeemAmount = amount - storedBal + requiredBal;\\n        // Withdraw tokens from Compound if needed\\n        compoundStore().cToken.redeemUnderlying(redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Sets the Compound token that should be used to manage the underlying Teller Token asset.\\n     * @param cTokenAddress Address of the Compound token that has the same underlying asset as the TToken.\\n     * @param balanceRatioMin Percentage indicating the _ limit of underlying token balance should remain on the TToken\\n     * @param balanceRatioMax Percentage indicating the _ limit of underlying token balance should remain on the TToken\\n     */\\n    function init(\\n        address cTokenAddress,\\n        uint16 balanceRatioMin,\\n        uint16 balanceRatioMax\\n    ) external {\\n        compoundStore().cToken = ICErc20(cTokenAddress);\\n        compoundStore().balanceRatioMin = balanceRatioMin;\\n        compoundStore().balanceRatioMax = balanceRatioMax;\\n    }\\n}\\n\",\"keccak256\":\"0x8010d80b76958fb7ebf20e7d6453a6da37f9e1b8df0ba8d1f24abc0a9039403e\",\"license\":\"MIT\"},\"contracts/lending/ttoken/strategies/compound/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ICErc20 } from \\\"../../../../shared/interfaces/ICErc20.sol\\\";\\n\\nstruct Store {\\n    ICErc20 cToken;\\n    uint16 balanceRatioMax;\\n    uint16 balanceRatioMin;\\n}\\n\\nbytes32 constant POSITION = keccak256(\\n    \\\"ttoken.strategy.compound.storage.position\\\"\\n);\\n\\nfunction store() pure returns (Store storage s_) {\\n    bytes32 position = POSITION;\\n    assembly {\\n        s_.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x16d3e964881a04766b91242778cfb1e70df37f17cec8e59ac4e9fe213672608b\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IComptroller.sol\\\";\\n\\ninterface ICErc20 {\\n    /*** User Interface ***/\\n\\n    /**\\n        @notice The mint function transfers an asset into the protocol, which begins accumulating interest based on the current Supply Rate for the asset. The user receives a quantity of cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\\n        @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which shall supply the asset, and own the minted cTokens.\\n        @dev Before supplying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /**\\n        @notice The redeem function converts a specified quantity of cTokens into the underlying asset, and returns them to the user. The amount of underlying tokens received is equal to the quantity of cTokens redeemed, multiplied by the current Exchange Rate. The amount redeemed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param redeemTokens The number of cTokens to be redeemed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which redeemed funds shall be transferred.\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    /**\\n        @notice The redeem underlying function converts cTokens into a specified quantity of the underlying asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param redeemAmount The amount of underlying to be redeemed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which redeemed funds shall be transferred.\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    /**\\n        @notice The borrow function transfers an asset from the protocol to the user, and creates a borrow balance which begins accumulating interest based on the Borrow Rate for the asset. The amount borrowed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param borrowAmount The amount of the underlying asset to be borrowed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which borrowed funds shall be transferred.\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    /**\\n        @notice The repay function transfers an asset into the protocol, reducing the user's borrow balance.\\n        @param repayAmount The amount of the underlying borrowed asset to be repaid. A value of -1 (i.e. 2^256 - 1) can be used to repay the full amount.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which borrowed the asset, and shall repay the borrow.\\n        @dev Before repaying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    /**\\n        @notice The repay function transfers an asset into the protocol, reducing the target user's borrow balance.\\n        @param borrower The account which borrowed the asset to be repaid.\\n        @param repayAmount The amount of the underlying borrowed asset to be repaid. A value of -1 (i.e. 2^256 - 1) can be used to repay the full amount.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which shall repay the borrow.\\n        @dev Before repaying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n\\n    /** End Admin Functions */\\n\\n    function underlying() external view returns (address);\\n\\n    /**\\n        @notice Each cToken is convertible into an ever increasing quantity of the underlying asset, as interest accrues in the market. The exchange rate between a cToken and the underlying asset is\\n        equal to: exchangeRate = (getCash() + totalBorrows() - totalReserves()) / totalSupply()\\n        @return The current exchange rate as an unsigned integer, scaled by 1e18.\\n     */\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        @notice The user's underlying balance, representing their assets in the protocol, is equal to the user's cToken balance multiplied by the Exchange Rate.\\n        @param account The account to get the underlying balance of.\\n        @return The amount of underlying currently owned by the account.\\n     */\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n}\\n\",\"keccak256\":\"0xe64ba9069b31f8149d63171b24b9fdef3a587b0461c3d4c8ac5976519bcde332\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] calldata cTokens) external;\\n\\n    function claimComp(\\n        address[] calldata holders,\\n        address[] calldata cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getCompAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x495d8bb746a524fea6ddc4286c955d7a0160718bf662456330a9d6d14b8a5da9\",\"license\":\"MIT\"},\"contracts/shared/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint256 internal constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * uint256(percentage)) / ONE_HUNDRED_PERCENT;\\n    }\\n\\n    function percent(int256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (self * int256(percentage)) / int256(ONE_HUNDRED_PERCENT);\\n    }\\n\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return uint16((num1 * ONE_HUNDRED_PERCENT) / num2);\\n    }\\n}\\n\",\"keccak256\":\"0x48686bb68ce1d2abd6abbb0b5befa019c03aad979c389e18da24e955ca8e5e60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e11806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a71461006757806307748e421461008f578063143a08d4146100f95780632e1a7d4d1461010f5780637d7c2a1c14610122578063a3f4df7e1461012a575b600080fd5b61007a610075366004610bf0565b610168565b60405190151581526020015b60405180910390f35b6100f761009d366004610b81565b600080516020610dbc833981519152805461ffff60a01b1961ffff948516600160b01b026001600160a01b0396909616600163ffff000160a01b0319909216919091179490941793909316600160a01b9190921602179055565b005b6101016101a1565b604051908152602001610086565b6100f761011d366004610c18565b6102d6565b6100f7610303565b61015b60405180604001604052806012815260200171436f6d706f756e6453747261746567795f3160701b81525081565b6040516100869190610c64565b60006301ffc9a760e01b6001600160e01b03198316148061019957506001600160e01b0319821663475c5f8560e01b145b90505b919050565b6000600080516020610dbc83398151915254604051633af9e66960e01b81523060048201526001600160a01b0390911690633af9e66990602401602060405180830381600087803b1580156101f557600080fd5b505af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610c30565b7ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610c30565b6102d19190610cbd565b905090565b60008060006102e361059b565b925092509250838310156102fd576102fd848484846106e1565b50505050565b600080600061031061059b565b92509250925061032b600080516020610dbc83398151915290565b5461ffff600160a01b909104811690821611156104fd5760006002600080516020610dbc83398151915254600160b01b900461ffff16600080516020610dbc833981519152546103869190600160a01b900461ffff16610c97565b6103909190610cd5565b905060006103a76103a18587610cbd565b8361080a565b905060006103b58287610d4c565b90506104047ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546001600160a01b0316600080516020610dbc833981519152546001600160a01b03168361082e565b600080516020610dbc8339815191525460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190610c30565b506040805180820182526012815271436f6d706f756e6453747261746567795f3160701b6020820152905133916104c591610c48565b604051908190038120907f6fdf209766b5dcac078a26790f7b3adf9db4e6e47d7bd8b84b754d0aff00d9e890600090a3505050610596565b600080516020610dbc8339815191525461ffff600160b01b909104811690821610156105965761053060008484846106e1565b6040805180820182526012815271436f6d706f756e6453747261746567795f3160701b60208201529051339161056591610c48565b604051908190038120907f6fdf209766b5dcac078a26790f7b3adf9db4e6e47d7bd8b84b754d0aff00d9e890600090a35b505050565b600080807ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561060157600080fd5b505afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610c30565b9250600080516020610dbc83398151915254604051633af9e66960e01b81523060048201526001600160a01b0390911690633af9e66990602401602060405180830381600087803b15801561068d57600080fd5b505af11580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190610c30565b91506106da836106d58482610cbd565b610911565b9050909192565b60006002600080516020610dbc83398151915254600160b01b900461ffff16600080516020610dbc833981519152546107259190600160a01b900461ffff16610c97565b61072f9190610cd5565b9050600061075a866107418688610cbd565b61074b9190610d4c565b6107558585610d29565b61080a565b90506000816107698789610d4c565b6107739190610cbd565b9050600080516020610dbc8339815191525460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e390602401602060405180830381600087803b1580156107c857600080fd5b505af11580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190610c30565b5050505050505050565b600061271061081d61ffff841685610d0a565b6108279190610cf6565b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190610c30565b6108bc9190610cbd565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506102fd908590610920565b60008161081d61271085610d0a565b6000610975826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109f79092919063ffffffff16565b80519091501561059657808060200190518101906109939190610bd0565b6105965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610a068484600085610a0e565b949350505050565b606082471015610a6f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109ee565b843b610abd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109ee565b600080866001600160a01b03168587604051610ad99190610c48565b60006040518083038185875af1925050503d8060008114610b16576040519150601f19603f3d011682016040523d82523d6000602084013e610b1b565b606091505b5091509150610b2b828286610b36565b979650505050505050565b60608315610b45575081610827565b825115610b555782518084602001fd5b8160405162461bcd60e51b81526004016109ee9190610c64565b803561ffff8116811461019c57600080fd5b600080600060608486031215610b95578283fd5b83356001600160a01b0381168114610bab578384fd5b9250610bb960208501610b6f565b9150610bc760408501610b6f565b90509250925092565b600060208284031215610be1578081fd5b81518015158114610827578182fd5b600060208284031215610c01578081fd5b81356001600160e01b031981168114610827578182fd5b600060208284031215610c29578081fd5b5035919050565b600060208284031215610c41578081fd5b5051919050565b60008251610c5a818460208701610d63565b9190910192915050565b6000602082528251806020840152610c83816040850160208701610d63565b601f01601f19169190910160400192915050565b600061ffff808316818516808303821115610cb457610cb4610d8f565b01949350505050565b60008219821115610cd057610cd0610d8f565b500190565b600061ffff80841680610cea57610cea610da5565b92169190910492915050565b600082610d0557610d05610da5565b500490565b6000816000190483118215151615610d2457610d24610d8f565b500290565b600061ffff83811690831681811015610d4457610d44610d8f565b039392505050565b600082821015610d5e57610d5e610d8f565b500390565b60005b83811015610d7e578181015183820152602001610d66565b838111156102fd5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfed3587eaf1ad651488a9caa8b9da3f6a00a087652e2f69c943fec67c95f1cd7cca26469706673582212204f08de81552a276ffc34b742ccb2d8bfae09c535966ed3516f2451acb5104c4b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a71461006757806307748e421461008f578063143a08d4146100f95780632e1a7d4d1461010f5780637d7c2a1c14610122578063a3f4df7e1461012a575b600080fd5b61007a610075366004610bf0565b610168565b60405190151581526020015b60405180910390f35b6100f761009d366004610b81565b600080516020610dbc833981519152805461ffff60a01b1961ffff948516600160b01b026001600160a01b0396909616600163ffff000160a01b0319909216919091179490941793909316600160a01b9190921602179055565b005b6101016101a1565b604051908152602001610086565b6100f761011d366004610c18565b6102d6565b6100f7610303565b61015b60405180604001604052806012815260200171436f6d706f756e6453747261746567795f3160701b81525081565b6040516100869190610c64565b60006301ffc9a760e01b6001600160e01b03198316148061019957506001600160e01b0319821663475c5f8560e01b145b90505b919050565b6000600080516020610dbc83398151915254604051633af9e66960e01b81523060048201526001600160a01b0390911690633af9e66990602401602060405180830381600087803b1580156101f557600080fd5b505af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610c30565b7ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610c30565b6102d19190610cbd565b905090565b60008060006102e361059b565b925092509250838310156102fd576102fd848484846106e1565b50505050565b600080600061031061059b565b92509250925061032b600080516020610dbc83398151915290565b5461ffff600160a01b909104811690821611156104fd5760006002600080516020610dbc83398151915254600160b01b900461ffff16600080516020610dbc833981519152546103869190600160a01b900461ffff16610c97565b6103909190610cd5565b905060006103a76103a18587610cbd565b8361080a565b905060006103b58287610d4c565b90506104047ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546001600160a01b0316600080516020610dbc833981519152546001600160a01b03168361082e565b600080516020610dbc8339815191525460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190610c30565b506040805180820182526012815271436f6d706f756e6453747261746567795f3160701b6020820152905133916104c591610c48565b604051908190038120907f6fdf209766b5dcac078a26790f7b3adf9db4e6e47d7bd8b84b754d0aff00d9e890600090a3505050610596565b600080516020610dbc8339815191525461ffff600160b01b909104811690821610156105965761053060008484846106e1565b6040805180820182526012815271436f6d706f756e6453747261746567795f3160701b60208201529051339161056591610c48565b604051908190038120907f6fdf209766b5dcac078a26790f7b3adf9db4e6e47d7bd8b84b754d0aff00d9e890600090a35b505050565b600080807ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561060157600080fd5b505afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610c30565b9250600080516020610dbc83398151915254604051633af9e66960e01b81523060048201526001600160a01b0390911690633af9e66990602401602060405180830381600087803b15801561068d57600080fd5b505af11580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190610c30565b91506106da836106d58482610cbd565b610911565b9050909192565b60006002600080516020610dbc83398151915254600160b01b900461ffff16600080516020610dbc833981519152546107259190600160a01b900461ffff16610c97565b61072f9190610cd5565b9050600061075a866107418688610cbd565b61074b9190610d4c565b6107558585610d29565b61080a565b90506000816107698789610d4c565b6107739190610cbd565b9050600080516020610dbc8339815191525460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e390602401602060405180830381600087803b1580156107c857600080fd5b505af11580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190610c30565b5050505050505050565b600061271061081d61ffff841685610d0a565b6108279190610cf6565b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190610c30565b6108bc9190610cbd565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506102fd908590610920565b60008161081d61271085610d0a565b6000610975826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109f79092919063ffffffff16565b80519091501561059657808060200190518101906109939190610bd0565b6105965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610a068484600085610a0e565b949350505050565b606082471015610a6f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109ee565b843b610abd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109ee565b600080866001600160a01b03168587604051610ad99190610c48565b60006040518083038185875af1925050503d8060008114610b16576040519150601f19603f3d011682016040523d82523d6000602084013e610b1b565b606091505b5091509150610b2b828286610b36565b979650505050505050565b60608315610b45575081610827565b825115610b555782518084602001fd5b8160405162461bcd60e51b81526004016109ee9190610c64565b803561ffff8116811461019c57600080fd5b600080600060608486031215610b95578283fd5b83356001600160a01b0381168114610bab578384fd5b9250610bb960208501610b6f565b9150610bc760408501610b6f565b90509250925092565b600060208284031215610be1578081fd5b81518015158114610827578182fd5b600060208284031215610c01578081fd5b81356001600160e01b031981168114610827578182fd5b600060208284031215610c29578081fd5b5035919050565b600060208284031215610c41578081fd5b5051919050565b60008251610c5a818460208701610d63565b9190910192915050565b6000602082528251806020840152610c83816040850160208701610d63565b601f01601f19169190910160400192915050565b600061ffff808316818516808303821115610cb457610cb4610d8f565b01949350505050565b60008219821115610cd057610cd0610d8f565b500190565b600061ffff80841680610cea57610cea610da5565b92169190910492915050565b600082610d0557610d05610da5565b500490565b6000816000190483118215151615610d2457610d24610d8f565b500290565b600061ffff83811690831681811015610d4457610d44610d8f565b039392505050565b600082821015610d5e57610d5e610d8f565b500390565b60005b83811015610d7e578181015183820152602001610d66565b838111156102fd5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfed3587eaf1ad651488a9caa8b9da3f6a00a087652e2f69c943fec67c95f1cd7cca26469706673582212204f08de81552a276ffc34b742ccb2d8bfae09c535966ed3516f2451acb5104c4b64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "init(address,uint16,uint16)": {
        "params": {
          "balanceRatioMax": "Percentage indicating the _ limit of underlying token balance should remain on the TToken",
          "balanceRatioMin": "Percentage indicating the _ limit of underlying token balance should remain on the TToken",
          "cTokenAddress": "Address of the Compound token that has the same underlying asset as the TToken."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of underlying tokens that must be available."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "init(address,uint16,uint16)": {
        "notice": "Sets the Compound token that should be used to manage the underlying Teller Token asset."
      },
      "rebalance()": {
        "notice": "Rebalances the underlying asset held by the Teller Token. This strategy looks at the ratio of held underlying asset balance and balance deposited into Compound. Based on the store {balanceRatioMin} and {balanceRatioMax} values, will deposit or withdraw to keep the ratio within that range."
      },
      "withdraw(uint256)": {
        "notice": "Rebalances the TToken funds by indicating a minimum {amount} of underlying tokens that must be present  after the call.If the minimum amount is present, no rebalance happens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
