{
  "address": "0xC3777063E7d5B845F18c8aeb77075bccc0734D0b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7aaafdfd4e21779ea4c0beb24131bc1de2c741bf46d65b1296907a54a589317",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xC3777063E7d5B845F18c8aeb77075bccc0734D0b",
    "transactionIndex": 0,
    "gasUsed": "254120",
    "logsBloom": "0x
    "blockHash": "0x253d27a48b76c1da28cd95747d3e3753d2dba2957a1b7e028e76045d9980e12d",
    "transactionHash": "0xf7aaafdfd4e21779ea4c0beb24131bc1de2c741bf46d65b1296907a54a589317",
    "logs": [],
    "blockNumber": 24632308,
    "cumulativeGasUsed": "254120",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ea653af39b9a57489bbccfbe05a6ac3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"params\":{\"_nft\":\"The address of the TellerNFT.\",\"admin\":\"The address of an admin.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants an address a new role. Requirements:  - Sender must be role admin.\"},\"initialize(address,address)\":{\"notice\":\"Initializes the Distributor contract with the TellerNFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/distributor/entry/initialize.sol\":\"ent_initialize_NFTDistributor_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/contexts/access-control/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlEvents {\\n    event OwnerSet(address indexed owner);\\n\\n    event OwnerTransferred(address indexed owner, address indexed prevOwner);\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xe810f81cc2c393f9f7df19841cae3cb78ac914c5501238713d6c62192ac026a9\",\"license\":\"MIT\"},\"contracts/contexts/access-control/entry/grant-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../data.sol\\\";\\nimport \\\"../internal/grant-role.sol\\\";\\nimport \\\"../internal/is-admin-for-role.sol\\\";\\n\\ncontract ent_grantRole_AccessControl_v1 is\\n    int_grantRole_AccessControl_v1,\\n    int_isAdminForRole_AccessControl_v1\\n{\\n    /**\\n     * @notice Grants an address a new role.\\n     *\\n     * Requirements:\\n     *  - Sender must be role admin.\\n     */\\n    function grantRole(bytes32 role, address account) external {\\n        require(_isAdminForRole(role, msg.sender), \\\"AccessControl: not admin\\\");\\n        _grantRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb806e676e1e37ed92178ff51c2b5d9a6e281f753fecf5d54e498ef0a8eba6010\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/grant-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { AccessControlEvents } from \\\"../data.sol\\\";\\nimport \\\"./has-role.sol\\\";\\n\\nabstract contract int_grantRole_AccessControl_v1 is\\n    int_hasRole_AccessControl_v1\\n{\\n    /**\\n     * @dev Should only use when circumventing admin checking. See {../entry/grant-role.sol}\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (_hasRole(role, account)) return;\\n        accessControlRolesStore().roles[role].members[account] = true;\\n        emit AccessControlEvents.RoleGranted(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x00d1772a83d5853b217eca18921f6c1b338919e7112fe4acf559847a21fd41f4\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/has-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage/roles.sol\\\";\\n\\nabstract contract int_hasRole_AccessControl_v1 is sto_AccessControl_Roles {\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool hasRole_)\\n    {\\n        hasRole_ = accessControlRolesStore().roles[role].members[account];\\n    }\\n}\\n\",\"keccak256\":\"0x631c0c260f7de64c32a205405e3ec424a6b34aec27987ced91a0254fdabfb1a7\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/is-admin-for-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage/roles.sol\\\";\\n\\nabstract contract int_isAdminForRole_AccessControl_v1 is\\n    sto_AccessControl_Roles\\n{\\n    function _isAdminForRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool isAdminForRole_)\\n    {\\n        isAdminForRole_ = accessControlRolesStore().roles[\\n            accessControlRolesStore().roles[role].adminRole\\n        ]\\n            .members[account];\\n    }\\n}\\n\",\"keccak256\":\"0xaa04218771b81b87c6d4d604de5d075c3a2d7eafe970ad5fe28fec8b915cc78c\",\"license\":\"MIT\"},\"contracts/contexts/access-control/storage/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RoleData } from \\\"../data.sol\\\";\\n\\ncontract sto_AccessControl_Roles {\\n    bytes32 internal constant POS =\\n        keccak256(\\\"teller_protocol.storage.access_control.roles\\\");\\n\\n    struct AccessControlRolesStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    function accessControlRolesStore()\\n        internal\\n        pure\\n        returns (AccessControlRolesStorage storage s)\\n    {\\n        bytes32 position = POS;\\n\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3173b189dddc069a22ac5a5f2d411305846c9de523f8ce279b7219f2ee51470\",\"license\":\"MIT\"},\"contracts/contexts/initializable/modifiers/initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage.sol\\\";\\n\\nabstract contract mod_initializer_Initializable_v1 is sto_Initializable {\\n    modifier initializer {\\n        require(\\n            !initializableStorage().initialized,\\n            \\\"Teller: already initialized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2f7b6a9d7b4b7a93bd8bf857eed576fcb5f8a4bbc068870e92548e02b34f3f2d\",\"license\":\"MIT\"},\"contracts/contexts/initializable/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract sto_Initializable {\\n    struct InitializableLayout {\\n        bool initialized;\\n    }\\n\\n    bytes32 internal constant INITIALIZABLE_STORAGE_POSITION =\\n        keccak256(abi.encode(\\\"teller_protocol.context.initializable.v1\\\"));\\n\\n    function initializableStorage()\\n        internal\\n        pure\\n        returns (InitializableLayout storage l_)\\n    {\\n        bytes32 position = INITIALIZABLE_STORAGE_POSITION;\\n\\n        assembly {\\n            l_.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f5031385df5132017a84f53744755f78df94ea99560137b36cb85d89f7365c3\",\"license\":\"MIT\"},\"contracts/nft/ITellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ITellerNFT {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    /**\\n     * @notice The contract metadata URI.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param index Tier index to get info.\\n     */\\n    function getTier(uint256 index) external view returns (Tier memory tier_);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     */\\n    function getTokenTier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 index_, Tier memory tier_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory hashes_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getOwnedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned);\\n\\n    /**\\n     * @notice It mints a new token for a Tier index.\\n     *\\n     * Requirements:\\n     *  - Caller must be an authorized minter\\n     */\\n    function mint(uint256 tierIndex, address owner) external;\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {MINTER} role\\n     */\\n    function addTier(Tier memory newTier) external;\\n\\n    /**\\n     * @notice Sets the contract level metadata URI hash.\\n     * @param contractURIHash The hash to the initial contract level metadata.\\n     */\\n    function setContractURIHash(string memory contractURIHash) external;\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param minters The addresses that should allowed to mint tokens.\\n     */\\n    function initialize(address[] calldata minters) external;\\n}\\n\",\"keccak256\":\"0x7c788b94c175b70eec6b10bfe0655616fc0beb2ce3ef70a6fa750f291d35106c\",\"license\":\"MIT\"},\"contracts/nft/distributor/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant MINTER = keccak256(\\\"MINTER\\\");\\n\\nstruct MerkleRoot {\\n    bytes32 merkleRoot;\\n    uint256 tierIndex;\\n}\\n\\nstruct ClaimNFTRequest {\\n    uint256 merkleIndex;\\n    uint256 nodeIndex;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n}\\n\\nlibrary DistributorEvents {\\n    event Claimed(address indexed account);\\n\\n    event MerkleAdded(uint256 index);\\n}\\n\",\"keccak256\":\"0x3d0d14b0ed21ead3c29e3cd4195c5d40fb987bda0e6e4b61a60d8e2c5c1807c3\",\"license\":\"MIT\"},\"contracts/nft/distributor/entry/initialize.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../store.sol\\\";\\nimport \\\"../../../contexts/initializable/modifiers/initializer.sol\\\";\\nimport \\\"../../../contexts/access-control/entry/grant-role.sol\\\";\\n\\n// Utils\\nimport { ADMIN } from \\\"../data.sol\\\";\\n\\n// Interfaces\\nimport \\\"../../ITellerNFT.sol\\\";\\n\\ncontract ent_initialize_NFTDistributor_v1 is\\n    sto_NFTDistributor,\\n    mod_initializer_Initializable_v1,\\n    ent_grantRole_AccessControl_v1\\n{\\n    /**\\n     * @notice Initializes the Distributor contract with the TellerNFT\\n     * @param _nft The address of the TellerNFT.\\n     * @param admin The address of an admin.\\n     */\\n    function initialize(address _nft, address admin) external initializer {\\n        distributorStore().nft = ITellerNFT(_nft);\\n\\n        _grantRole(ADMIN, admin);\\n    }\\n}\\n\",\"keccak256\":\"0xa8f195adeca4bff24d17b4be23664752a2a8b78238dc6a4e02f2b7d4ea2e9b77\",\"license\":\"MIT\"},\"contracts/nft/distributor/store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../ITellerNFT.sol\\\";\\n\\n// Utils\\nimport { MerkleRoot } from \\\"./data.sol\\\";\\n\\nabstract contract sto_NFTDistributor {\\n    struct DistributorStorage {\\n        ITellerNFT nft;\\n        MerkleRoot[] merkleRoots;\\n        mapping(uint256 => mapping(uint256 => uint256)) claimedBitMap;\\n    }\\n\\n    bytes32 constant POSITION = keccak256(\\\"teller_nft.distributor\\\");\\n\\n    function distributorStore()\\n        internal\\n        pure\\n        returns (DistributorStorage storage s)\\n    {\\n        bytes32 P = POSITION;\\n        assembly {\\n            s.slot := P\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36f9931c4a494d66a4ad3273c3c9cf82b4d3441dead869c69e3e0a7a3f4f08b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632f2ff15d1461003b578063485cc95514610050575b600080fd5b61004e61004936600461034a565b610063565b005b61004e61005e366004610318565b610107565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e6020908152604080832060010154835280832033845290915290205460ff166100f95760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c3a206e6f742061646d696e000000000000000060448201526064015b60405180910390fd5b61010382826101c0565b5050565b61010f610289565b5460ff16156101605760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65723a20616c726561647920696e697469616c697a6564000000000060448201526064016100f0565b7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36080546001600160a01b0319166001600160a01b0384161790556101037fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42825b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff161561020f57610103565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000806040516020016102de9060208082526028908201527f74656c6c65725f70726f746f636f6c2e636f6e746578742e696e697469616c696040820152677a61626c652e763160c01b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b80356001600160a01b038116811461031357600080fd5b919050565b6000806040838503121561032a578182fd5b610333836102fc565b9150610341602084016102fc565b90509250929050565b6000806040838503121561035c578182fd5b82359150610341602084016102fc56fea26469706673582212204cf1fc0b2aaae9a7b6616897e6caede60acc2942e7715716c20f1aac334665c464736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632f2ff15d1461003b578063485cc95514610050575b600080fd5b61004e61004936600461034a565b610063565b005b61004e61005e366004610318565b610107565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e6020908152604080832060010154835280832033845290915290205460ff166100f95760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c3a206e6f742061646d696e000000000000000060448201526064015b60405180910390fd5b61010382826101c0565b5050565b61010f610289565b5460ff16156101605760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65723a20616c726561647920696e697469616c697a6564000000000060448201526064016100f0565b7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36080546001600160a01b0319166001600160a01b0384161790556101037fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42825b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff161561020f57610103565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000806040516020016102de9060208082526028908201527f74656c6c65725f70726f746f636f6c2e636f6e746578742e696e697469616c696040820152677a61626c652e763160c01b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b80356001600160a01b038116811461031357600080fd5b919050565b6000806040838503121561032a578182fd5b610333836102fc565b9150610341602084016102fc565b90509250929050565b6000806040838503121561035c578182fd5b82359150610341602084016102fc56fea26469706673582212204cf1fc0b2aaae9a7b6616897e6caede60acc2942e7715716c20f1aac334665c464736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address,address)": {
        "params": {
          "_nft": "The address of the TellerNFT.",
          "admin": "The address of an admin."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "grantRole(bytes32,address)": {
        "notice": "Grants an address a new role. Requirements:  - Sender must be role admin."
      },
      "initialize(address,address)": {
        "notice": "Initializes the Distributor contract with the TellerNFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
