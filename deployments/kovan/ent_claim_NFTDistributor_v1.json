{
  "address": "0xE2F9d99216999370EE54d48a28CA89570B4Eb775",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "merkleIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nodeIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct ClaimNFTRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7923ce300ac02c5e73e610cd03207fd6fb5f29f30da477bf20087bde33e6755",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xE2F9d99216999370EE54d48a28CA89570B4Eb775",
    "transactionIndex": 0,
    "gasUsed": "526030",
    "logsBloom": "0x
    "blockHash": "0xb4148de7c12780e77019e31d2e5d649f8ac4f007d770278d93e2b031c3bab9a1",
    "transactionHash": "0xb7923ce300ac02c5e73e610cd03207fd6fb5f29f30da477bf20087bde33e6755",
    "logs": [],
    "blockNumber": 24632313,
    "cumulativeGasUsed": "526030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ea653af39b9a57489bbccfbe05a6ac3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct ClaimNFTRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,(uint256,uint256,uint256,bytes32[])[])\":{\"params\":{\"account\":\"The address to claim NFTs on behalf.\",\"requests\":\"An array requests data generated from the merkle tree. Requirements:  - Node in the merkle root must not be claimed already  - Proof of the node must match the merkle tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,(uint256,uint256,uint256,bytes32[])[])\":{\"notice\":\"Claims TellerNFTs for a given verifiable merkle proofs for each tier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/distributor/entry/claim.sol\":\"ent_claim_NFTDistributor_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xc5f68fba2036a18144e7a208c0cb8038221d3b985b735b77359f554aecec33b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/nft/ITellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ITellerNFT {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    /**\\n     * @notice The contract metadata URI.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param index Tier index to get info.\\n     */\\n    function getTier(uint256 index) external view returns (Tier memory tier_);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     */\\n    function getTokenTier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 index_, Tier memory tier_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory hashes_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getOwnedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned);\\n\\n    /**\\n     * @notice It mints a new token for a Tier index.\\n     *\\n     * Requirements:\\n     *  - Caller must be an authorized minter\\n     */\\n    function mint(uint256 tierIndex, address owner) external;\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {MINTER} role\\n     */\\n    function addTier(Tier memory newTier) external;\\n\\n    /**\\n     * @notice Sets the contract level metadata URI hash.\\n     * @param contractURIHash The hash to the initial contract level metadata.\\n     */\\n    function setContractURIHash(string memory contractURIHash) external;\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param minters The addresses that should allowed to mint tokens.\\n     */\\n    function initialize(address[] calldata minters) external;\\n}\\n\",\"keccak256\":\"0x7c788b94c175b70eec6b10bfe0655616fc0beb2ce3ef70a6fa750f291d35106c\",\"license\":\"MIT\"},\"contracts/nft/distributor/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant MINTER = keccak256(\\\"MINTER\\\");\\n\\nstruct MerkleRoot {\\n    bytes32 merkleRoot;\\n    uint256 tierIndex;\\n}\\n\\nstruct ClaimNFTRequest {\\n    uint256 merkleIndex;\\n    uint256 nodeIndex;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n}\\n\\nlibrary DistributorEvents {\\n    event Claimed(address indexed account);\\n\\n    event MerkleAdded(uint256 index);\\n}\\n\",\"keccak256\":\"0x3d0d14b0ed21ead3c29e3cd4195c5d40fb987bda0e6e4b61a60d8e2c5c1807c3\",\"license\":\"MIT\"},\"contracts/nft/distributor/entry/claim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../store.sol\\\";\\nimport \\\"../internal/distributor.sol\\\";\\n\\n// Utils\\nimport { ClaimNFTRequest, DistributorEvents } from \\\"../data.sol\\\";\\n\\ncontract ent_claim_NFTDistributor_v1 is\\n    sto_NFTDistributor,\\n    int_distributor_NFT_v1\\n{\\n    /**\\n     * @notice Claims TellerNFTs for a given verifiable merkle proofs for each tier.\\n     * @param account The address to claim NFTs on behalf.\\n     * @param requests An array requests data generated from the merkle tree.\\n     *\\n     * Requirements:\\n     *  - Node in the merkle root must not be claimed already\\n     *  - Proof of the node must match the merkle tree\\n     */\\n    function claim(address account, ClaimNFTRequest[] calldata requests)\\n        external\\n    {\\n        for (uint256 i; i < requests.length; i++) {\\n            require(\\n                !_isClaimed(requests[i].merkleIndex, requests[i].nodeIndex),\\n                \\\"TellerNFT Distributor: already claimed\\\"\\n            );\\n            require(\\n                _verifyProof(account, requests[i]),\\n                \\\"TellerNFT Distributor: invalid proof\\\"\\n            );\\n\\n            // Mark it claimed and send the token.\\n            _setClaimed(requests[i].merkleIndex, requests[i].nodeIndex);\\n            uint256 tierIndex =\\n                distributorStore().merkleRoots[requests[i].merkleIndex]\\n                    .tierIndex;\\n            for (uint256 j; j < requests[i].amount; j++) {\\n                distributorStore().nft.mint(tierIndex, account);\\n            }\\n        }\\n\\n        emit DistributorEvents.Claimed(account);\\n    }\\n}\\n\",\"keccak256\":\"0x70baca771e4f40e035b88cb89b1c4f7632a35324db4736e262798ac88380bb32\",\"license\":\"MIT\"},\"contracts/nft/distributor/internal/distributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../store.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n// Utils\\nimport { ClaimNFTRequest } from \\\"../data.sol\\\";\\n\\ncontract int_distributor_NFT_v1 is sto_NFTDistributor {\\n    /**\\n     * @notice It checks the merkle root for a tier if it has already been claimed.\\n     * @param merkleIndex Index of the tier.\\n     * @param nodeIndex Index of the node in the merkle root.\\n     */\\n    function _setClaimed(uint256 merkleIndex, uint256 nodeIndex) internal {\\n        uint256 claimedWordIndex = nodeIndex / 256;\\n        uint256 claimedBitIndex = nodeIndex % 256;\\n        distributorStore().claimedBitMap[merkleIndex][claimedWordIndex] =\\n            distributorStore().claimedBitMap[merkleIndex][claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n\\n    /**\\n     * @notice It checks the merkle root for a tier if it has already been claimed.\\n     * @param merkleIndex Index of the tier.\\n     * @param nodeIndex Index of the node in the merkle root.\\n     */\\n    function _isClaimed(uint256 merkleIndex, uint256 nodeIndex)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 claimedWordIndex = nodeIndex / 256;\\n        uint256 claimedBitIndex = nodeIndex % 256;\\n        uint256 claimedWord =\\n            distributorStore().claimedBitMap[merkleIndex][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function _verifyProof(address account, ClaimNFTRequest memory request)\\n        internal\\n        view\\n        returns (bool verified)\\n    {\\n        verified = MerkleProof.verify(\\n            request.merkleProof,\\n            distributorStore().merkleRoots[request.merkleIndex].merkleRoot,\\n            keccak256(\\n                abi.encodePacked(request.nodeIndex, account, request.amount)\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdccea61d21c527cb0ba9d3221bf8f06d09cf05a2ce74cc53ccf8f1891ef2a99e\",\"license\":\"MIT\"},\"contracts/nft/distributor/store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../ITellerNFT.sol\\\";\\n\\n// Utils\\nimport { MerkleRoot } from \\\"./data.sol\\\";\\n\\nabstract contract sto_NFTDistributor {\\n    struct DistributorStorage {\\n        ITellerNFT nft;\\n        MerkleRoot[] merkleRoots;\\n        mapping(uint256 => mapping(uint256 => uint256)) claimedBitMap;\\n    }\\n\\n    bytes32 constant POSITION = keccak256(\\\"teller_nft.distributor\\\");\\n\\n    function distributorStore()\\n        internal\\n        pure\\n        returns (DistributorStorage storage s)\\n    {\\n        bytes32 P = POSITION;\\n        assembly {\\n            s.slot := P\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36f9931c4a494d66a4ad3273c3c9cf82b4d3441dead869c69e3e0a7a3f4f08b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061088e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806389e2173314610030575b600080fd5b61004361003e36600461062f565b610045565b005b60005b818110156103a7576100c183838381811061007357634e487b7160e01b600052603260045260246000fd5b905060200281019061008591906106bd565b358484848181106100a657634e487b7160e01b600052603260045260246000fd5b90506020028101906100b891906106bd565b602001356103e1565b156101225760405162461bcd60e51b815260206004820152602660248201527f54656c6c65724e4654204469737472696275746f723a20616c726561647920636044820152651b185a5b595960d21b60648201526084015b60405180910390fd5b6101668484848481811061014657634e487b7160e01b600052603260045260246000fd5b905060200281019061015891906106bd565b61016190610721565b61044b565b6101be5760405162461bcd60e51b8152602060048201526024808201527f54656c6c65724e4654204469737472696275746f723a20696e76616c696420706044820152633937b7b360e11b6064820152608401610119565b61022f8383838181106101e157634e487b7160e01b600052603260045260246000fd5b90506020028101906101f391906106bd565b3584848481811061021457634e487b7160e01b600052603260045260246000fd5b905060200281019061022691906106bd565b6020013561050a565b60007fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36184848481811061027257634e487b7160e01b600052603260045260246000fd5b905060200281019061028491906106bd565b60000135815481106102a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154905060005b8484848181106102dd57634e487b7160e01b600052603260045260246000fd5b90506020028101906102ef91906106bd565b60400135811015610392577fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c360546040516394bf804d60e01b8152600481018490526001600160a01b038881166024830152909116906394bf804d90604401600060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b50505050808061038a906107f1565b9150506102bd565b5050808061039f906107f1565b915050610048565b506040516001600160a01b038416907fb449c24d261a59627b537c8c41c57ab559f4205c56bea745ff61c5521bece21490600090a2505050565b6000806103f06101008461070d565b9050600061040061010085610818565b60009586527fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c362602090815260408088209488529390529190942054600190911b908116149392505050565b6000610503826060015161047c7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36090565b6001018460000151815481106104a257634e487b7160e01b600052603260045260246000fd5b600091825260209182902060029091020154858201516040808801518151948501929092526bffffffffffffffffffffffff1960608a901b169084015260548301529060740160405160208183030381529060405280519060200120610572565b9392505050565b60006105186101008361070d565b9050600061052861010084610818565b60009485527fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36260209081526040808720948752939052919093208054600190921b90911790555050565b600081815b85518110156106245760008682815181106105a257634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116105e4576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610611565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061061c816107f1565b915050610577565b509092149392505050565b600080600060408486031215610643578283fd5b83356001600160a01b0381168114610659578384fd5b9250602084013567ffffffffffffffff80821115610675578384fd5b818601915086601f830112610688578384fd5b813581811115610696578485fd5b8760208260051b85010111156106aa578485fd5b6020830194508093505050509250925092565b60008235607e198336030181126106d2578182fd5b9190910192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561070557610705610842565b604052919050565b60008261071c5761071c61082c565b500490565b600060808236031215610732578081fd5b61073c60806106dc565b823581526020808401358183015260408401356040830152606084013567ffffffffffffffff8082111561076e578485fd5b9085019036601f830112610780578485fd5b81358181111561079257610792610842565b8060051b91506107a38483016106dc565b8181528481019084860136858701880111156107bd578889fd5b8895505b838610156107df5780358352600195909501949186019186016107c1565b50606087015250939695505050505050565b600060001982141561081157634e487b7160e01b81526011600452602481fd5b5060010190565b6000826108275761082761082c565b500690565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220bb8062d81ac7034fc1c47b3c1aa708c5ae61ca5e5d5f92e0bc1b6d037fb6e50964736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806389e2173314610030575b600080fd5b61004361003e36600461062f565b610045565b005b60005b818110156103a7576100c183838381811061007357634e487b7160e01b600052603260045260246000fd5b905060200281019061008591906106bd565b358484848181106100a657634e487b7160e01b600052603260045260246000fd5b90506020028101906100b891906106bd565b602001356103e1565b156101225760405162461bcd60e51b815260206004820152602660248201527f54656c6c65724e4654204469737472696275746f723a20616c726561647920636044820152651b185a5b595960d21b60648201526084015b60405180910390fd5b6101668484848481811061014657634e487b7160e01b600052603260045260246000fd5b905060200281019061015891906106bd565b61016190610721565b61044b565b6101be5760405162461bcd60e51b8152602060048201526024808201527f54656c6c65724e4654204469737472696275746f723a20696e76616c696420706044820152633937b7b360e11b6064820152608401610119565b61022f8383838181106101e157634e487b7160e01b600052603260045260246000fd5b90506020028101906101f391906106bd565b3584848481811061021457634e487b7160e01b600052603260045260246000fd5b905060200281019061022691906106bd565b6020013561050a565b60007fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36184848481811061027257634e487b7160e01b600052603260045260246000fd5b905060200281019061028491906106bd565b60000135815481106102a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154905060005b8484848181106102dd57634e487b7160e01b600052603260045260246000fd5b90506020028101906102ef91906106bd565b60400135811015610392577fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c360546040516394bf804d60e01b8152600481018490526001600160a01b038881166024830152909116906394bf804d90604401600060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b50505050808061038a906107f1565b9150506102bd565b5050808061039f906107f1565b915050610048565b506040516001600160a01b038416907fb449c24d261a59627b537c8c41c57ab559f4205c56bea745ff61c5521bece21490600090a2505050565b6000806103f06101008461070d565b9050600061040061010085610818565b60009586527fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c362602090815260408088209488529390529190942054600190911b908116149392505050565b6000610503826060015161047c7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36090565b6001018460000151815481106104a257634e487b7160e01b600052603260045260246000fd5b600091825260209182902060029091020154858201516040808801518151948501929092526bffffffffffffffffffffffff1960608a901b169084015260548301529060740160405160208183030381529060405280519060200120610572565b9392505050565b60006105186101008361070d565b9050600061052861010084610818565b60009485527fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36260209081526040808720948752939052919093208054600190921b90911790555050565b600081815b85518110156106245760008682815181106105a257634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116105e4576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610611565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061061c816107f1565b915050610577565b509092149392505050565b600080600060408486031215610643578283fd5b83356001600160a01b0381168114610659578384fd5b9250602084013567ffffffffffffffff80821115610675578384fd5b818601915086601f830112610688578384fd5b813581811115610696578485fd5b8760208260051b85010111156106aa578485fd5b6020830194508093505050509250925092565b60008235607e198336030181126106d2578182fd5b9190910192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561070557610705610842565b604052919050565b60008261071c5761071c61082c565b500490565b600060808236031215610732578081fd5b61073c60806106dc565b823581526020808401358183015260408401356040830152606084013567ffffffffffffffff8082111561076e578485fd5b9085019036601f830112610780578485fd5b81358181111561079257610792610842565b8060051b91506107a38483016106dc565b8181528481019084860136858701880111156107bd578889fd5b8895505b838610156107df5780358352600195909501949186019186016107c1565b50606087015250939695505050505050565b600060001982141561081157634e487b7160e01b81526011600452602481fd5b5060010190565b6000826108275761082761082c565b500690565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220bb8062d81ac7034fc1c47b3c1aa708c5ae61ca5e5d5f92e0bc1b6d037fb6e50964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,(uint256,uint256,uint256,bytes32[])[])": {
        "params": {
          "account": "The address to claim NFTs on behalf.",
          "requests": "An array requests data generated from the merkle tree. Requirements:  - Node in the merkle root must not be claimed already  - Proof of the node must match the merkle tree"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,(uint256,uint256,uint256,bytes32[])[])": {
        "notice": "Claims TellerNFTs for a given verifiable merkle proofs for each tier."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
